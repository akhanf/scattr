# ---- begin snakebids boilerplate ----------------------------------------------

from snakebids import (
    bids, filter_list, generate_inputs, get_wildcard_constraints
)


configfile: "config/snakebids.yml"


# writes inputs_config.yml and updates config dict
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_config=["bids", "derivatives"],
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
    use_bids_inputs=True,
)


# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------

import os
from pathlib import Path
from functools import partial

# Relevant wildcards (upgrade for filtering)
subj_zip_list = {
    k: v
    for k, v in inputs["T1w"].input_zip_lists.items()
    if k in ["subject", "session"]
}

# Warnings
if config.get("labelmerge_base_dir") or config.get("labelmerge_overlay_dir"):
    print(
        """
    WARNING: Use of custom atlas detected - ensure label map used is available 
    for each subject in dataset in subject's T1w space with associated metadata.
    """
    )

if len(inputs.sessions) > 1 and not config.get("responsemean_ses"):
    print(
        """
    WARNING: Multiple sessions detected - average response function will be 
    computed using all sessions (not recommended), unless specific session is 
    provided (--responsemean_ses <session>).
    """
    )


# Rules
include: "rules/freesurfer.smk"
include: "rules/zona_bb_subcortex.smk"
include: "rules/mrtpipelines.smk"
include: "rules/qc.smk"


rule all:
    input:
        tck_files=expand(
            rules.filtered_tck2connectome.output.sl_assignment,
            zip,
            **subj_zip_list
        ),
        dti_files=expand(rules.dwi2tensor.output.dti, zip, **subj_zip_list),
        qc_files=rules.gather_qc.input
    params:
        mrtrix_dir=expand(
            bids(
                root=str(Path(config["output_dir"]) / "mrtrix"),
                include_subject_dir=False,
                include_session_dir=False,
            ),
            zip,
            **subj_zip_list
        ),
    shell:  # Clean up intermediate files that left behind
        "rm -r {params.mrtrix_dir}/exclude_mask {params.mrtrix_dir}/roi_masks {params.mrtrix_dir}/unfiltered"
